'use client';

import { useState, useEffect, ReactNode } from 'react';
import Image from 'next/image';

import * as Atoms from '@/components/atoms';
import * as Libs from '@/libs';
import * as Stores from '@/core';
import * as Molecules from '@/molecules';
import * as Hooks from '@/hooks';

interface DialogBackupPhraseProps {
  children?: ReactNode;
}

export function DialogBackupPhrase({ children }: DialogBackupPhraseProps) {
  const [isHidden, setIsHidden] = useState(true);
  const [recoveryWords, setRecoveryWords] = useState<string[]>([]);
  const [step, setStep] = useState(1);
  const { mnemonic } = Stores.useOnboardingStore();

  const handleClose = () => {
    setIsHidden(true);
    setStep(1);
  };

  useEffect(() => {
    if (mnemonic) {
      // Use existing mnemonic (generated by PublicKeyCard)
      setRecoveryWords(mnemonic.split(' '));
    }
  }, [mnemonic]);

  return (
    <Atoms.Dialog
      onOpenChange={(open) => {
        if (!open) {
          handleClose();
        }
      }}
    >
      {children ? (
        <Atoms.DialogTrigger asChild>{children}</Atoms.DialogTrigger>
      ) : (
        <Atoms.DialogTrigger asChild>
          <Atoms.Button id="backup-recovery-phrase-btn">Continue</Atoms.Button>
        </Atoms.DialogTrigger>
      )}
      <Atoms.DialogContent className="max-w-sm md:max-w-2xl" hiddenTitle="Backup recovery phrase">
        {step === 1 && (
          <RecoveryStep1
            recoveryWords={recoveryWords}
            isHidden={isHidden}
            setIsHidden={setIsHidden}
            setStep={setStep}
          />
        )}
        {step === 2 && <RecoveryStep2 recoveryWords={recoveryWords} setStep={setStep} />}
        {step === 3 && <RecoveryStep3 handleClose={handleClose} />}
      </Atoms.DialogContent>
    </Atoms.Dialog>
  );
}

function RecoveryStep1({
  recoveryWords,
  isHidden,
  setIsHidden,
  setStep,
}: {
  recoveryWords: string[];
  isHidden: boolean;
  setIsHidden: (isHidden: boolean) => void;
  setStep: (step: number) => void;
}) {
  return (
    <>
      <Atoms.DialogHeader>
        <Atoms.DialogTitle>Backup recovery phrase</Atoms.DialogTitle>
        <Atoms.DialogDescription>
          <span className="hidden md:inline">
            Use the recovery phrase below to recover your account at a later date. Write down these 12 words in the
            correct order and store them in a safe place.{' '}
          </span>
          <span className="md:hidden">
            Write down these 12 words in the correct order and store them in a safe place.{' '}
          </span>
          <span className="text-brand font-bold">Never share this recovery phrase with anyone.</span>
        </Atoms.DialogDescription>
      </Atoms.DialogHeader>

      <Atoms.Container className={Libs.cn(isHidden && 'blur-md')}>
        <Atoms.Container display="grid" className="grid-cols-2 md:grid-cols-3 gap-1.5 md:gap-3">
          {recoveryWords.map((word, index) => (
            <Atoms.Container key={index} className="items-center gap-3 rounded-md bg-secondary px-5 py-4 flex-row">
              <Atoms.Badge
                id={`backup-recovery-phrase-word-${index + 1}`}
                variant="outline"
                className="h-5 min-w-[20px] rounded-full px-1 font-semibold"
              >
                {index + 1}
              </Atoms.Badge>
              <span className="text-base font-medium">{word}</span>
            </Atoms.Container>
          ))}
        </Atoms.Container>
      </Atoms.Container>

      <Atoms.DialogFooter>
        {isHidden ? (
          <>
            <Atoms.DialogClose asChild>
              <Atoms.Button id="backup-recovery-phrase-cancel-btn" variant="outline" size="lg">
                Cancel
              </Atoms.Button>
            </Atoms.DialogClose>
            <Atoms.Button
              id="backup-recovery-phrase-reveal-btn"
              size="lg"
              onClick={() => {
                setIsHidden(!isHidden);
                setStep(1);
              }}
            >
              <Libs.Eye className="h-4 w-4" />
              Reveal recovery phrase
            </Atoms.Button>
          </>
        ) : (
          <>
            <div className="contents md:hidden">
              <Atoms.Button id="backup-recovery-phrase-confirm-btn" size="lg" onClick={() => setStep(2)}>
                <Libs.ArrowRight className="h-4 w-4" />
                Confirm recovery phrase
              </Atoms.Button>
              <Atoms.Button
                variant="outline"
                size="lg"
                onClick={() => {
                  setIsHidden(!isHidden);
                  setStep(1);
                }}
              >
                <Libs.EyeOff className="h-4 w-4" />
                Hide recovery phrase
              </Atoms.Button>
            </div>
            <div className="hidden md:contents">
              <Atoms.Button
                variant="outline"
                size="lg"
                onClick={() => {
                  setIsHidden(!isHidden);
                  setStep(1);
                }}
              >
                <Libs.EyeOff className="h-4 w-4" />
                Hide recovery phrase
              </Atoms.Button>
              <Atoms.Button size="lg" onClick={() => setStep(2)}>
                <Libs.ArrowRight className="h-4 w-4" />
                Confirm recovery phrase
              </Atoms.Button>
            </div>
          </>
        )}
      </Atoms.DialogFooter>
    </>
  );
}

function RecoveryStep2({ recoveryWords, setStep }: { recoveryWords: string[]; setStep: (step: number) => void }) {
  const { userWords, errors, remainingWords, handleWordClick, validateWords, clearWord, isComplete } =
    Hooks.useRecoveryPhraseValidation({ recoveryWords });

  const handleValidate = () => {
    if (validateWords()) {
      setStep(3);
    }
  };

  return (
    <>
      <Atoms.DialogHeader>
        <Atoms.DialogTitle>Confirm recovery phrase</Atoms.DialogTitle>
        <Atoms.DialogDescription>
          Click or tap the 12 words in the correct order or enter the words manually.
        </Atoms.DialogDescription>
      </Atoms.DialogHeader>

      <Atoms.Container className="space-y-6">
        <Atoms.Container className="flex-wrap gap-2 flex-row">
          {remainingWords.map(({ word, index, isUsed }) => (
            <Atoms.Button
              id={`backup-recovery-phrase-word-${word}-${index + 1}`}
              key={`${word}-${index}`}
              variant={isUsed ? 'secondary' : 'outline'}
              className={`rounded-full ${
                isUsed
                  ? 'opacity-40 bg-transparent border text-muted-foreground cursor-not-allowed'
                  : 'border-transparent bg-secondary cursor-pointer'
              }`}
              onClick={() => !isUsed && handleWordClick(word)}
              disabled={isUsed}
            >
              {word}
            </Atoms.Button>
          ))}
        </Atoms.Container>

        <Atoms.Container display="grid" className="grid-cols-2 sm:grid-cols-3 gap-1.5 md:gap-3">
          {userWords.map((word, i) => {
            const isCorrect = word !== '' && word === recoveryWords[i];
            const isError = errors[i];
            return (
              <Molecules.WordSlot
                key={i}
                mode="readonly"
                index={i}
                word={word}
                isCorrect={isCorrect}
                isError={isError}
                onClear={clearWord}
              />
            );
          })}
        </Atoms.Container>
      </Atoms.Container>

      <Atoms.DialogFooter>
        <Atoms.Button variant="outline" size="lg" onClick={() => setStep(1)}>
          <Libs.ArrowLeft className="h-4 w-4" />
          Back
        </Atoms.Button>
        <Atoms.Button
          id="backup-recovery-phrase-validate-btn"
          size="lg"
          onClick={handleValidate}
          disabled={!isComplete}
        >
          <Libs.Check className="h-4 w-4" />
          Validate
        </Atoms.Button>
      </Atoms.DialogFooter>
    </>
  );
}

function RecoveryStep3({ handleClose }: { handleClose: () => void }) {
  return (
    <>
      <Atoms.DialogHeader>
        <Atoms.DialogTitle>Backup complete</Atoms.DialogTitle>
        <Atoms.DialogDescription>
          You can use your backed up recovery phrase to restore your account later.
        </Atoms.DialogDescription>
      </Atoms.DialogHeader>

      <Atoms.Container className="w-full bg-card rounded-md p-12 flex items-center justify-center">
        <Image src="/images/check.png" alt="Backup Complete" width={180} height={180} className="w-48 h-48" />
      </Atoms.Container>

      <Atoms.DialogFooter>
        <div className="contents md:hidden">
          <Atoms.DialogClose asChild>
            <Atoms.Button id="backup-recovery-phrase-finish-btn" onClick={handleClose}>
              <Libs.ArrowRight className="h-4 w-4" />
              Finish
            </Atoms.Button>
          </Atoms.DialogClose>
          <Atoms.DialogClose asChild>
            <Atoms.Button variant="outline" onClick={handleClose}>
              Cancel
            </Atoms.Button>
          </Atoms.DialogClose>
        </div>
        <div className="hidden md:contents">
          <Atoms.DialogClose asChild>
            <Atoms.Button variant="outline" onClick={handleClose}>
              Cancel
            </Atoms.Button>
          </Atoms.DialogClose>
          <Atoms.DialogClose asChild>
            <Atoms.Button onClick={handleClose}>
              <Libs.ArrowRight className="h-4 w-4" />
              Finish
            </Atoms.Button>
          </Atoms.DialogClose>
        </div>
      </Atoms.DialogFooter>
    </>
  );
}
